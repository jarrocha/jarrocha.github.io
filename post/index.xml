<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Innercoder.dev</title>
    <link>https://jarrocha.github.io/post/</link>
    <description>Recent content in Posts on Innercoder.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jarrocha.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Setting up mbed-cli on Linux</title>
      <link>https://jarrocha.github.io/post/setup-mbed-cli-on-linux/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jarrocha.github.io/post/setup-mbed-cli-on-linux/</guid>
      <description>Intro This tutorial comes from the fact that I faced errors that were simple but not easy to find the solution due to the mbed compile scripts error outputs.
I will try to get involved with the project to help improve feedback from the scripts thus reducing the need to go out seeking help.
Steps 1. Download the latest toolchain. It can be untar and installed where its more convinient: https://developer.</description>
    </item>
    
    <item>
      <title>Linux Kernel Modules: Character Devices</title>
      <link>https://jarrocha.github.io/post/2018-11-18-char-driver/</link>
      <pubDate>Mon, 12 Nov 2018 14:00:17 -0700</pubDate>
      
      <guid>https://jarrocha.github.io/post/2018-11-18-char-driver/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;This post will be part of a series where device drivers will be presented and
quickly analized for people that need a quick reference of how to make device
drivers on an updated kernel. The driver presented here was tested on a 3.2 and
3.16 Linux Kernel. I will make a driver with more features and test it on a
newer kernel next time.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Coding Your Own Network Sniffer</title>
      <link>https://jarrocha.github.io/post/2018-11-18-network-sniffer/</link>
      <pubDate>Sat, 11 Mar 2017 16:47:01 -0700</pubDate>
      
      <guid>https://jarrocha.github.io/post/2018-11-18-network-sniffer/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;This a small project that came to mind after reading some reference
material while stuyding HTTP. It basically consists of using raw sockets to
make the kernel handle L2 data/frames to the user application. From there
anything is possible, a ping server, a traceroute appication, IP spoofing,
man-in-the-middle attacks, the sky is the limits.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Capturing Websites With Sockets and HTTP</title>
      <link>https://jarrocha.github.io/post/2018-11-18-sockets-http/</link>
      <pubDate>Fri, 02 Sep 2016 11:57:56 -0700</pubDate>
      
      <guid>https://jarrocha.github.io/post/2018-11-18-sockets-http/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;This post shows a program that captures web pages&amp;rsquo;s index.html with sockets.
To do this, it creates a TCP client socket, connects to a web server and takes
all the data to stdout. The input supports IPv4, IPv6, and hostname resolution.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementing a Prethreaded Web Server</title>
      <link>https://jarrocha.github.io/post/2018-11-18-pthreaded-server/</link>
      <pubDate>Wed, 13 Jul 2016 16:53:42 -0700</pubDate>
      
      <guid>https://jarrocha.github.io/post/2018-11-18-pthreaded-server/</guid>
      <description>&lt;p&gt;p&amp;gt;In this post I will analyze an implementation of a prethreaded TCP server that
leverages the HTTP protocol. This is a personal ongoing project that will
continue its
development and I found it to be at a good place to start sharing what I have
done so far. The whole purpose of this is to later on built a tool to test its
performance and how to break it with malformed packets. It is such an
interesting project that everytime I sit down with it, I start thinking about
different features to implement on it. Again all this is coded in C with the
POSIX threads and sockets API.&lt;/p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Code Performance Analysis With Assembly &amp; C: Part 2</title>
      <link>https://jarrocha.github.io/post/2018-11-18-performance-analysis-ii/</link>
      <pubDate>Wed, 18 May 2016 16:43:48 -0700</pubDate>
      
      <guid>https://jarrocha.github.io/post/2018-11-18-performance-analysis-ii/</guid>
      <description>&lt;p&gt;In this second part, the optimization code will be shown. Specifically O1, O2,
and O3. We are going to be able to see, what performance decisions the gcc
compiler makes; for example, we are going to check if the compilers takes the
function that calculates the string length calls out of the loop.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TCP Sockets Server</title>
      <link>https://jarrocha.github.io/post/tcp-server/</link>
      <pubDate>Wed, 18 May 2016 10:47:50 -0400</pubDate>
      
      <guid>https://jarrocha.github.io/post/tcp-server/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;This post serves as a explanation of the basics of a TCP socket server, which
serves as the base to a future post explaining the basics of a web server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the complete code of an older version is fully posted in the end.
Check my github repo for an updated version. &lt;a href=&#34;https://github.com/jarrocha/psockets/tree/master/tcp_server&#34;&gt;Link&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Installing and Configuring OpenvSwitch With QEMU-KVM</title>
      <link>https://jarrocha.github.io/post/2018-11-18-ovs-kvm/</link>
      <pubDate>Mon, 18 Apr 2016 16:25:31 -0700</pubDate>
      
      <guid>https://jarrocha.github.io/post/2018-11-18-ovs-kvm/</guid>
      <description>&lt;p&gt;The maturity reached by Software Defined Networking (SDN) in the lastest years
is a very important one. We are at a point where we could see this architecture
/framework become a standard. And what makes it so amazing is its fundamental
idea of openness, just like Linux did it around 20 years ago. OpenvSwitch (OVS)
is a tool used to create virtual bridges which can then connect virtual or
physical hosts. It implements both traditional L2 switching protocols or
Openflow.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Automating Quagga With QEMU-KVM: Part 1</title>
      <link>https://jarrocha.github.io/post/2018-11-18-quagga-kvm-i/</link>
      <pubDate>Wed, 23 Mar 2016 16:06:40 -0700</pubDate>
      
      <guid>https://jarrocha.github.io/post/2018-11-18-quagga-kvm-i/</guid>
      <description>&lt;p&gt;Some days ago I needed a proof of concept for some routing configuration using
Linux that was stuck in my head for days already. So I needed a way to bring up
some Linux boxes to quickly to check this. The &lt;a href=&#34;https://opennetlinux.org/docs/routingtutorial&#34;&gt;ONL website&lt;/a&gt; proved very
useful, but I needed to use CentOS. So I came up with a script based on the
mentioned tutorial that brings up QEMU-KVM images with Quagga already installed
and configured.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Code Performance Analysis With Assembly &amp; C: Part 1</title>
      <link>https://jarrocha.github.io/post/2018-11-18-performance-analysis-i/</link>
      <pubDate>Fri, 19 Feb 2016 12:38:59 -0700</pubDate>
      
      <guid>https://jarrocha.github.io/post/2018-11-18-performance-analysis-i/</guid>
      <description>&lt;p&gt;These blog series belong to some old notes that I have and thought that could be
useful to redo. It is always good to refresh material and what a better way than
to write about it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux Shell Programming Basics</title>
      <link>https://jarrocha.github.io/post/2018-11-18-shell-prog-basics/</link>
      <pubDate>Tue, 12 Jan 2016 10:30:20 -0700</pubDate>
      
      <guid>https://jarrocha.github.io/post/2018-11-18-shell-prog-basics/</guid>
      <description>&lt;p&gt;A shell is an interactive program that in its core forks for new processes
and wait for their termination. In other words, we present a prompt, the
user enters the commands, we parse the input , and execute it. Good error
and signal handling is needed, as well as the return values of the different
system calls that we will use. The man pages come real handy for this since
we have a very good reference just a terminal screen away. This program is
considered a good start to learn the basic of system calls and signal processing.
This post serves as a quick analysis of the code in the
&lt;a href=&#34;https://github.com/jarrocha/bschell&#34;&gt;github repository&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>